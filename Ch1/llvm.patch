diff --git a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
index 2b9315c22ed9..676732e2ec81 100644
--- a/llvm/CMakeLists.txt
+++ b/llvm/CMakeLists.txt
@@ -443,6 +443,7 @@ set(LLVM_ALL_TARGETS
   WebAssembly
   X86
   XCore
+  Toy
   )
 
 # List of targets with JIT support:
diff --git a/llvm/cmake/config-ix.cmake b/llvm/cmake/config-ix.cmake
index b78c1b34ab8b..a01bccb0bb1c 100644
--- a/llvm/cmake/config-ix.cmake
+++ b/llvm/cmake/config-ix.cmake
@@ -496,6 +496,8 @@ elseif (LLVM_NATIVE_ARCH STREQUAL "m68k")
   set(LLVM_NATIVE_ARCH M68k)
 elseif (LLVM_NATIVE_ARCH MATCHES "loongarch")
   set(LLVM_NATIVE_ARCH LoongArch)
+elseif (LLVM_NATIVE_ARCH MATCHES "toy")
+  set(LLVM_NATIVE_ARCH Toy)
 else ()
   message(FATAL_ERROR "Unknown architecture ${LLVM_NATIVE_ARCH}")
 endif ()
diff --git a/llvm/include/llvm/TargetParser/Triple.h b/llvm/include/llvm/TargetParser/Triple.h
index 59513fa2f206..668a0832fbbf 100644
--- a/llvm/include/llvm/TargetParser/Triple.h
+++ b/llvm/include/llvm/TargetParser/Triple.h
@@ -105,6 +105,7 @@ public:
     wasm64,         // WebAssembly with 64-bit pointers
     renderscript32, // 32-bit RenderScript
     renderscript64, // 64-bit RenderScript
+    toy,
     ve,             // NEC SX-Aurora Vector Engine
     LastArchType = ve
   };
diff --git a/llvm/lib/Target/Toy/CMakeLists.txt b/llvm/lib/Target/Toy/CMakeLists.txt
new file mode 100644
index 000000000000..e08037f5cce0
--- /dev/null
+++ b/llvm/lib/Target/Toy/CMakeLists.txt
@@ -0,0 +1,7 @@
+add_llvm_component_group(Toy)
+set(LLVM_TARGET_DEFINITIONS Toy.td)
+
+add_llvm_target(ToyCodeGen ToyTargetMachine.cpp)
+
+add_subdirectory(TargetInfo)
+add_subdirectory(MCTargetDesc)
diff --git a/llvm/lib/Target/Toy/MCTargetDesc/CMakeLists.txt b/llvm/lib/Target/Toy/MCTargetDesc/CMakeLists.txt
new file mode 100644
index 000000000000..d55d72a8ece4
--- /dev/null
+++ b/llvm/lib/Target/Toy/MCTargetDesc/CMakeLists.txt
@@ -0,0 +1,3 @@
+add_llvm_library(LLVMToyDesc
+  ToyMCTargetDesc.cpp
+)
diff --git a/llvm/lib/Target/Toy/MCTargetDesc/ToyMCTargetDesc.cpp b/llvm/lib/Target/Toy/MCTargetDesc/ToyMCTargetDesc.cpp
new file mode 100644
index 000000000000..ef6ac0073ee9
--- /dev/null
+++ b/llvm/lib/Target/Toy/MCTargetDesc/ToyMCTargetDesc.cpp
@@ -0,0 +1,5 @@
+
+// This function will be called by llc via C preprocessor
+extern "C" void LLVMInitializeToyTargetMC() {
+
+}
\ No newline at end of file
diff --git a/llvm/lib/Target/Toy/MCTargetDesc/ToyMCTargetDesc.h b/llvm/lib/Target/Toy/MCTargetDesc/ToyMCTargetDesc.h
new file mode 100644
index 000000000000..8b137891791f
--- /dev/null
+++ b/llvm/lib/Target/Toy/MCTargetDesc/ToyMCTargetDesc.h
@@ -0,0 +1 @@
+
diff --git a/llvm/lib/Target/Toy/TargetInfo/CMakeLists.txt b/llvm/lib/Target/Toy/TargetInfo/CMakeLists.txt
new file mode 100644
index 000000000000..f818cca61438
--- /dev/null
+++ b/llvm/lib/Target/Toy/TargetInfo/CMakeLists.txt
@@ -0,0 +1,3 @@
+add_llvm_library(LLVMToyInfo
+  ToyTargetInfo.cpp
+)
diff --git a/llvm/lib/Target/Toy/TargetInfo/ToyTargetInfo.cpp b/llvm/lib/Target/Toy/TargetInfo/ToyTargetInfo.cpp
new file mode 100644
index 000000000000..f095c909ec76
--- /dev/null
+++ b/llvm/lib/Target/Toy/TargetInfo/ToyTargetInfo.cpp
@@ -0,0 +1,14 @@
+#include "TargetInfo/ToyTargetInfo.h"
+#include "llvm/MC/TargetRegistry.h"
+
+using namespace llvm;
+
+Target &llvm::getTheToyTarget() {
+  static Target TheTOYTarget;
+  return TheTOYTarget;
+}
+
+extern "C" void LLVMInitializeToyTargetInfo() {
+  RegisterTarget<Triple::toy, /*HasJIT=*/true> X(
+      getTheToyTarget(), "toy", "TOY Backend for riscv (32-bit) [experimental]", "TOY");
+}
diff --git a/llvm/lib/Target/Toy/TargetInfo/ToyTargetInfo.h b/llvm/lib/Target/Toy/TargetInfo/ToyTargetInfo.h
new file mode 100644
index 000000000000..20e06963d901
--- /dev/null
+++ b/llvm/lib/Target/Toy/TargetInfo/ToyTargetInfo.h
@@ -0,0 +1,12 @@
+#ifndef LLVM_LIB_TARGET_TOY_TARGETINFO_TOYTARGETINFO_H
+#define LLVM_LIB_TARGET_TOY_TARGETINFO_TOYTARGETINFO_H
+
+namespace llvm {
+
+class Target;
+
+Target &getTheToyTarget();
+
+} // namespace llvm
+
+#endif // LLVM_LIB_TARGET_TOY_TARGETINFO_TOYTARGETINFO_H
diff --git a/llvm/lib/Target/Toy/Toy.td b/llvm/lib/Target/Toy/Toy.td
new file mode 100644
index 000000000000..dea585804f8f
--- /dev/null
+++ b/llvm/lib/Target/Toy/Toy.td
@@ -0,0 +1 @@
+include "llvm/Target/Target.td"
diff --git a/llvm/lib/Target/Toy/ToyTargetMachine.cpp b/llvm/lib/Target/Toy/ToyTargetMachine.cpp
new file mode 100644
index 000000000000..73fb6d2674e8
--- /dev/null
+++ b/llvm/lib/Target/Toy/ToyTargetMachine.cpp
@@ -0,0 +1,13 @@
+#include "ToyTargetMachine.h"
+#include "TargetInfo/ToyTargetInfo.h"
+#include "llvm/CodeGen/Passes.h"
+#include "llvm/CodeGen/TargetPassConfig.h"
+#include "llvm/CodeGen/TargetLoweringObjectFileImpl.h"
+#include "llvm/MC/TargetRegistry.h"
+#include <string>
+
+using namespace llvm;
+
+extern "C" void LLVMInitializeToyTarget() {
+
+}
diff --git a/llvm/lib/Target/Toy/ToyTargetMachine.h b/llvm/lib/Target/Toy/ToyTargetMachine.h
new file mode 100644
index 000000000000..3b8bb1972d8a
--- /dev/null
+++ b/llvm/lib/Target/Toy/ToyTargetMachine.h
@@ -0,0 +1,19 @@
+#include "llvm/Target/TargetMachine.h"
+#include <memory>
+#include <optional>
+
+using namespace llvm;
+
+class TOYTargetMachine : public LLVMTargetMachine {
+  std::unique_ptr<TargetLoweringObjectFile> TLOF;
+
+public:
+  TOYTargetMachine(Target const &T, Triple const &TT, StringRef CPU, StringRef FS,
+    TargetOptions const &Options, std::optional<Reloc::Model> RM,
+    std::optional<CodeModel::Model> CM, CodeGenOpt::Level OL, bool JIT);
+
+  TargetPassConfig *createPassConfig(PassManagerBase &PM) override;
+  TargetLoweringObjectFile *getObjFileLowering() const override {
+    return TLOF.get();
+  }
+};
diff --git a/llvm/lib/TargetParser/Triple.cpp b/llvm/lib/TargetParser/Triple.cpp
index a68035989a93..584a9f701078 100644
--- a/llvm/lib/TargetParser/Triple.cpp
+++ b/llvm/lib/TargetParser/Triple.cpp
@@ -81,6 +81,7 @@ StringRef Triple::getArchTypeName(ArchType Kind) {
   case wasm32:         return "wasm32";
   case wasm64:         return "wasm64";
   case x86:            return "i386";
+  case toy:            return "toy";
   case x86_64:         return "x86_64";
   case xcore:          return "xcore";
   case xtensa:         return "xtensa";
@@ -854,6 +855,7 @@ static Triple::ObjectFormatType getDefaultFormat(const Triple &T) {
   case Triple::thumbeb:
   case Triple::ve:
   case Triple::xcore:
+  case Triple::toy:
   case Triple::xtensa:
     return Triple::ELF;
 
@@ -1434,6 +1436,7 @@ static unsigned getArchPointerBitWidth(llvm::Triple::ArchType Arch) {
   case llvm::Triple::thumbeb:
   case llvm::Triple::wasm32:
   case llvm::Triple::x86:
+  case llvm::Triple::toy:
   case llvm::Triple::xcore:
   case llvm::Triple::xtensa:
     return 32;
@@ -1524,6 +1527,7 @@ Triple Triple::get32BitArchVariant() const {
   case Triple::thumb:
   case Triple::thumbeb:
   case Triple::wasm32:
+  case Triple::toy:
   case Triple::x86:
   case Triple::xcore:
   case Triple::xtensa:
@@ -1577,6 +1581,7 @@ Triple Triple::get64BitArchVariant() const {
   case Triple::tce:
   case Triple::tcele:
   case Triple::xcore:
+  case Triple::toy:
   case Triple::xtensa:
     T.setArch(UnknownArch);
     break;
