diff --git a/llvm/include/llvm/TargetParser/Triple.h b/llvm/include/llvm/TargetParser/Triple.h
index 79ccd644a50b..175bbc00ccf4 100644
--- a/llvm/include/llvm/TargetParser/Triple.h
+++ b/llvm/include/llvm/TargetParser/Triple.h
@@ -61,6 +61,7 @@ public:
     loongarch32,    // LoongArch (32-bit): loongarch32
     loongarch64,    // LoongArch (64-bit): loongarch64
     m68k,           // M68k: Motorola 680x0 family
+    toy,            // ! Toy: the example Toy RiscV example for LLVM.
     mips,           // MIPS: mips, mipsallegrex, mipsr6
     mipsel,         // MIPSEL: mipsel, mipsallegrexe, mipsr6el
     mips64,         // MIPS64: mips64, mips64r6, mipsn32, mipsn32r6
@@ -872,6 +873,11 @@ public:
   /// Tests whether the target is LoongArch (32- and 64-bit).
   bool isLoongArch() const { return isLoongArch32() || isLoongArch64(); }
 
+  /// Tests whether the target is Toy.
+  bool isToy() const {
+    return getArch() == Triple::toy;
+  }
+
   /// Tests whether the target is MIPS 32-bit (little and big endian).
   bool isMIPS32() const {
     return getArch() == Triple::mips || getArch() == Triple::mipsel;
diff --git a/llvm/lib/TargetParser/Triple.cpp b/llvm/lib/TargetParser/Triple.cpp
index a3d6a06af976..fe4606fc5359 100644
--- a/llvm/lib/TargetParser/Triple.cpp
+++ b/llvm/lib/TargetParser/Triple.cpp
@@ -48,6 +48,7 @@ StringRef Triple::getArchTypeName(ArchType Kind) {
   case loongarch32:    return "loongarch32";
   case loongarch64:    return "loongarch64";
   case m68k:           return "m68k";
+  case toy:            return "toy";
   case mips64:         return "mips64";
   case mips64el:       return "mips64el";
   case mips:           return "mips";
@@ -113,6 +114,7 @@ StringRef Triple::getArchTypePrefix(ArchType Kind) {
   case ppcle:       return "ppc";
 
   case m68k:        return "m68k";
+  case toy:        return "toy";
 
   case mips:
   case mipsel:
@@ -342,6 +344,7 @@ Triple::ArchType Triple::getArchTypeForLLVMName(StringRef Name) {
     .Case("avr", avr)
     .StartsWith("bpf", BPFArch)
     .Case("m68k", m68k)
+    .Case("toy", toy)
     .Case("mips", mips)
     .Case("mipsel", mipsel)
     .Case("mips64", mips64)
@@ -490,6 +493,7 @@ static Triple::ArchType parseArch(StringRef ArchName) {
     .Case("thumbeb", Triple::thumbeb)
     .Case("avr", Triple::avr)
     .Case("m68k", Triple::m68k)
+    .Case("toy", Triple::toy)
     .Case("msp430", Triple::msp430)
     .Cases("mips", "mipseb", "mipsallegrex", "mipsisa32r6",
            "mipsr6", Triple::mips)
@@ -826,6 +830,7 @@ static Triple::ObjectFormatType getDefaultFormat(const Triple &T) {
   case Triple::loongarch32:
   case Triple::loongarch64:
   case Triple::m68k:
+  case Triple::toy:
   case Triple::mips64:
   case Triple::mips64el:
   case Triple::mips:
@@ -1412,6 +1417,7 @@ static unsigned getArchPointerBitWidth(llvm::Triple::ArchType Arch) {
   case llvm::Triple::le32:
   case llvm::Triple::loongarch32:
   case llvm::Triple::m68k:
+  case llvm::Triple::toy:
   case llvm::Triple::mips:
   case llvm::Triple::mipsel:
   case llvm::Triple::nvptx:
@@ -1503,6 +1509,7 @@ Triple Triple::get32BitArchVariant() const {
   case Triple::le32:
   case Triple::loongarch32:
   case Triple::m68k:
+  case Triple::toy:
   case Triple::mips:
   case Triple::mipsel:
   case Triple::nvptx:
@@ -1567,6 +1574,7 @@ Triple Triple::get64BitArchVariant() const {
   case Triple::kalimba:
   case Triple::lanai:
   case Triple::m68k:
+  case Triple::toy:
   case Triple::msp430:
   case Triple::r600:
   case Triple::shave:
@@ -1661,6 +1669,7 @@ Triple Triple::getBigEndianArchVariant() const {
   case Triple::r600:
   case Triple::renderscript32:
   case Triple::renderscript64:
+  case Triple::toy:
   case Triple::riscv32:
   case Triple::riscv64:
   case Triple::shave:
@@ -1771,6 +1780,7 @@ bool Triple::isLittleEndian() const {
   case Triple::renderscript64:
   case Triple::riscv32:
   case Triple::riscv64:
+  case Triple::toy:
   case Triple::shave:
   case Triple::sparcel:
   case Triple::spir64:
