diff --git a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
index 2b9315c22ed9..676732e2ec81 100644
--- a/llvm/CMakeLists.txt
+++ b/llvm/CMakeLists.txt
@@ -443,6 +443,7 @@ set(LLVM_ALL_TARGETS
   WebAssembly
   X86
   XCore
+  Toy
   )
 
 # List of targets with JIT support:
diff --git a/llvm/cmake/config-ix.cmake b/llvm/cmake/config-ix.cmake
index b78c1b34ab8b..a01bccb0bb1c 100644
--- a/llvm/cmake/config-ix.cmake
+++ b/llvm/cmake/config-ix.cmake
@@ -496,6 +496,8 @@ elseif (LLVM_NATIVE_ARCH STREQUAL "m68k")
   set(LLVM_NATIVE_ARCH M68k)
 elseif (LLVM_NATIVE_ARCH MATCHES "loongarch")
   set(LLVM_NATIVE_ARCH LoongArch)
+elseif (LLVM_NATIVE_ARCH MATCHES "toy")
+  set(LLVM_NATIVE_ARCH Toy)
 else ()
   message(FATAL_ERROR "Unknown architecture ${LLVM_NATIVE_ARCH}")
 endif ()
diff --git a/llvm/include/llvm/TargetParser/Triple.h b/llvm/include/llvm/TargetParser/Triple.h
index 59513fa2f206..668a0832fbbf 100644
--- a/llvm/include/llvm/TargetParser/Triple.h
+++ b/llvm/include/llvm/TargetParser/Triple.h
@@ -105,6 +105,7 @@ public:
     wasm64,         // WebAssembly with 64-bit pointers
     renderscript32, // 32-bit RenderScript
     renderscript64, // 64-bit RenderScript
+    toy,
     ve,             // NEC SX-Aurora Vector Engine
     LastArchType = ve
   };
diff --git a/llvm/lib/Target/Toy/CMakeLists.txt b/llvm/lib/Target/Toy/CMakeLists.txt
new file mode 100644
index 000000000000..1e7feaf260df
--- /dev/null
+++ b/llvm/lib/Target/Toy/CMakeLists.txt
@@ -0,0 +1,24 @@
+add_llvm_component_group(Toy)
+set(LLVM_TARGET_DEFINITIONS Toy.td)
+
+set(LLVM_TARGET_DEFINITIONS Toy.td)
+tablegen(LLVM ToyGenSubtargetInfo.inc -gen-subtarget)
+
+add_public_tablegen_target(ToyCommonTableGen)
+
+add_llvm_target(ToyCodeGen
+  ToyTargetMachine.cpp
+  ToyAsmPrinter.cpp
+
+  LINK_COMPONENTS
+  Analysis
+  AsmPrinter
+  Core
+  CodeGen
+  MC
+  Support
+  Target
+)
+
+add_subdirectory(TargetInfo)
+add_subdirectory(TargetDesc)
diff --git a/llvm/lib/Target/Toy/TargetDesc/CMakeLists.txt b/llvm/lib/Target/Toy/TargetDesc/CMakeLists.txt
new file mode 100644
index 000000000000..d48ac9d1a12d
--- /dev/null
+++ b/llvm/lib/Target/Toy/TargetDesc/CMakeLists.txt
@@ -0,0 +1,3 @@
+add_llvm_library(LLVMToyDesc
+  ToyTargetDesc.cpp
+)
diff --git a/llvm/lib/Target/Toy/TargetDesc/ToyTargetDesc.cpp b/llvm/lib/Target/Toy/TargetDesc/ToyTargetDesc.cpp
new file mode 100644
index 000000000000..ae1fb430fa5f
--- /dev/null
+++ b/llvm/lib/Target/Toy/TargetDesc/ToyTargetDesc.cpp
@@ -0,0 +1,41 @@
+#include "ToyTargetDesc.h"
+#include "llvm/ADT/None.h"
+
+#define GET_SUBTARGETINFO_MC_DESC
+#include "ToyGenSubtargetInfo.inc"
+
+using namespace llvm;
+
+static MCAsmInfo *createToyMCAsmInfo(MCRegisterInfo const &MRI,
+                                     Triple const &TT,
+                                     MCTargetOptions const &Options) {
+  MCAsmInfo *x = new MCAsmInfo();
+  return x;
+}
+
+static MCSubtargetInfo *createToyMCSubtargetInfo(Triple const &TT,
+                                                 StringRef CPU, StringRef FS) {
+  // NOTE: 这是个函数是通过 td 生成的
+  return createToyMCSubtargetInfoImpl(TT, CPU, CPU, FS);
+}
+
+static MCInstrInfo *createToyMCInstrInfo() {
+  MCInstrInfo *x = new MCInstrInfo();
+  return x;
+}
+
+static MCRegisterInfo *createToyMCRegisterInfo(Triple const &TT) {
+  MCRegisterInfo *x = new MCRegisterInfo();
+  return x;
+}
+
+static void initializeTarget(Target &T) {
+  TargetRegistry::RegisterMCRegInfo(T, createToyMCRegisterInfo);
+  TargetRegistry::RegisterMCInstrInfo(T, createToyMCInstrInfo);
+  TargetRegistry::RegisterMCSubtargetInfo(T, createToyMCSubtargetInfo);
+  TargetRegistry::RegisterMCAsmInfo(T, createToyMCAsmInfo);
+}
+
+extern "C" void LLVMInitializeToyTargetMC() {
+  initializeTarget(getTheToyTarget());
+}
diff --git a/llvm/lib/Target/Toy/TargetDesc/ToyTargetDesc.h b/llvm/lib/Target/Toy/TargetDesc/ToyTargetDesc.h
new file mode 100644
index 000000000000..2706c5bf8993
--- /dev/null
+++ b/llvm/lib/Target/Toy/TargetDesc/ToyTargetDesc.h
@@ -0,0 +1,24 @@
+// 2023-05-23 15:07
+#ifndef LLVM_LIB_TARGET_TOY_TARGET_DESC_H
+#define LLVM_LIB_TARGET_TOY_TARGET_DESC_H
+
+#include "llvm/MC/MCAsmInfo.h"
+#include "llvm/MC/MCInstrInfo.h"
+#include "llvm/MC/MCRegisterInfo.h"
+#include "llvm/MC/MCSubtargetInfo.h"
+#include "llvm/MC/MCTargetOptions.h"
+#include "llvm/MC/TargetRegistry.h"
+#include "llvm/Support/DataTypes.h"
+
+namespace llvm {
+
+class Target;
+
+Target &getTheToyTarget();
+
+} // namespace llvm
+
+#define GET_SUBTARGETINFO_ENUM
+#include "ToyGenSubtargetInfo.inc"
+
+#endif // LLVM_LIB_TARGET_TOY_TARGET_DESC_H
diff --git a/llvm/lib/Target/Toy/TargetInfo/CMakeLists.txt b/llvm/lib/Target/Toy/TargetInfo/CMakeLists.txt
new file mode 100644
index 000000000000..f818cca61438
--- /dev/null
+++ b/llvm/lib/Target/Toy/TargetInfo/CMakeLists.txt
@@ -0,0 +1,3 @@
+add_llvm_library(LLVMToyInfo
+  ToyTargetInfo.cpp
+)
diff --git a/llvm/lib/Target/Toy/TargetInfo/ToyTargetInfo.cpp b/llvm/lib/Target/Toy/TargetInfo/ToyTargetInfo.cpp
new file mode 100644
index 000000000000..fa13cf60a964
--- /dev/null
+++ b/llvm/lib/Target/Toy/TargetInfo/ToyTargetInfo.cpp
@@ -0,0 +1,15 @@
+#include "TargetInfo/ToyTargetInfo.h"
+#include "llvm/MC/TargetRegistry.h"
+
+using namespace llvm;
+
+Target &llvm::getTheToyTarget() {
+  static Target TheToyTarget;
+  return TheToyTarget;
+}
+
+extern "C" void LLVMInitializeToyTargetInfo() {
+  RegisterTarget<Triple::toy, /*HasJIT=*/true> X(
+      getTheToyTarget(), "toy", "TOY Backend for riscv (32-bit) [experimental]",
+      "TOY");
+}
diff --git a/llvm/lib/Target/Toy/TargetInfo/ToyTargetInfo.h b/llvm/lib/Target/Toy/TargetInfo/ToyTargetInfo.h
new file mode 100644
index 000000000000..2d41802ae53c
--- /dev/null
+++ b/llvm/lib/Target/Toy/TargetInfo/ToyTargetInfo.h
@@ -0,0 +1,12 @@
+#ifndef LLVM_LIB_TARGET_TOY_TARGETINFO_TOYTARGETINFO_H
+#define LLVM_LIB_TARGET_TOY_TARGETINFO_TOYTARGETINFO_H
+
+namespace llvm {
+
+class Target;
+
+Target &getTheToyTarget();
+
+} // namespace llvm
+
+#endif // LLVM_LIB_TARGET_TOY_TARGETINFO_TOYTARGETINFO_H
diff --git a/llvm/lib/Target/Toy/Toy.td b/llvm/lib/Target/Toy/Toy.td
new file mode 100644
index 000000000000..12ab0de9b02a
--- /dev/null
+++ b/llvm/lib/Target/Toy/Toy.td
@@ -0,0 +1,3 @@
+include "llvm/Target/Target.td"
+
+include "ToySubtarget.td"
diff --git a/llvm/lib/Target/Toy/ToyAsmPrinter.cpp b/llvm/lib/Target/Toy/ToyAsmPrinter.cpp
new file mode 100644
index 000000000000..d3f2ca79e6b1
--- /dev/null
+++ b/llvm/lib/Target/Toy/ToyAsmPrinter.cpp
@@ -0,0 +1,17 @@
+#include "ToyAsmPrinter.h"
+#include "TargetInfo/ToyTargetInfo.h"
+#include "llvm/CodeGen/AsmPrinter.h"
+#include "llvm/MC/MCStreamer.h"
+#include "llvm/MC/TargetRegistry.h"
+
+using namespace llvm;
+
+ToyAsmPrinter::ToyAsmPrinter(TargetMachine &TM,
+                             std::unique_ptr<MCStreamer> Streamer)
+    : AsmPrinter(TM, std::move(Streamer)) {}
+
+StringRef ToyAsmPrinter::getPassName() const { return "Toy Assembly Printer"; }
+
+extern "C" void LLVMInitializeToyAsmPrinter() {
+  RegisterAsmPrinter<ToyAsmPrinter> X(getTheToyTarget());
+}
diff --git a/llvm/lib/Target/Toy/ToyAsmPrinter.h b/llvm/lib/Target/Toy/ToyAsmPrinter.h
new file mode 100644
index 000000000000..585bcfd60580
--- /dev/null
+++ b/llvm/lib/Target/Toy/ToyAsmPrinter.h
@@ -0,0 +1,20 @@
+#ifndef LLVM_LIB_TARGET_TOY_ASMPRINTER_H
+#define LLVM_LIB_TARGET_TOY_ASMPRINTER_H
+
+#include "ToyTargetMachine.h"
+#include "llvm/CodeGen/AsmPrinter.h"
+#include "llvm/MC/MCStreamer.h"
+#include "llvm/Target/TargetMachine.h"
+
+namespace llvm {
+
+class ToyAsmPrinter : public AsmPrinter {
+public:
+  ToyAsmPrinter(TargetMachine &TM, std::unique_ptr<MCStreamer> Streamer);
+
+  virtual StringRef getPassName() const override;
+};
+
+} // namespace llvm
+
+#endif // LLVM_LIB_TARGET_TOY_ASMPRINTER_H
diff --git a/llvm/lib/Target/Toy/ToySubtarget.td b/llvm/lib/Target/Toy/ToySubtarget.td
new file mode 100644
index 000000000000..c1e22fbdfbd4
--- /dev/null
+++ b/llvm/lib/Target/Toy/ToySubtarget.td
@@ -0,0 +1,3 @@
+def Toy : Target {}
+
+def : ProcessorModel<"cpu-rv32", NoSchedModel, []>;
diff --git a/llvm/lib/Target/Toy/ToyTargetMachine.cpp b/llvm/lib/Target/Toy/ToyTargetMachine.cpp
new file mode 100644
index 000000000000..d14849be57e8
--- /dev/null
+++ b/llvm/lib/Target/Toy/ToyTargetMachine.cpp
@@ -0,0 +1,51 @@
+#include "ToyTargetMachine.h"
+#include "TargetInfo/ToyTargetInfo.h"
+#include "llvm/CodeGen/Passes.h"
+#include "llvm/CodeGen/TargetLoweringObjectFileImpl.h"
+#include "llvm/CodeGen/TargetPassConfig.h"
+#include "llvm/MC/TargetRegistry.h"
+#include <string>
+
+using namespace llvm;
+
+extern "C" void LLVMInitializeToyTarget() {
+  RegisterTargetMachine<TOYTargetMachine> X(getTheToyTarget());
+}
+
+static StringRef computeDataLayout(const Triple &TT, StringRef CPU,
+                                   const TargetOptions &Options) {
+  // Example:
+  //  e-m:e-p:64:64-i64:64-i128:128-n64-S128
+  //    e = little endian
+  //    m:e = mangling mode is ELF
+  //    p:64:64 = pointer size and the second value is both ABI and preferred
+  //    alignment. i64:64-i128:128 = data alignment constraint n64 = size of
+  //    integer register S128 = stack data size
+
+  return "e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S128";
+}
+
+static Reloc::Model getEffectiveRelocModel(bool JIT,
+                                           std::optional<Reloc::Model> RM) {
+  if (!RM.has_value() || JIT) {
+    return Reloc::Static;
+  }
+  return *RM;
+}
+
+TOYTargetMachine::TOYTargetMachine(Target const &T, Triple const &TT,
+                                   StringRef CPU, StringRef FS,
+                                   TargetOptions const &Options,
+                                   std::optional<Reloc::Model> RM,
+                                   std::optional<CodeModel::Model> CM,
+                                   CodeGenOpt::Level OL, bool JIT)
+    : LLVMTargetMachine(T, computeDataLayout(TT, CPU, Options), TT, CPU, FS,
+                        Options, getEffectiveRelocModel(JIT, RM),
+                        getEffectiveCodeModel(CM, CodeModel::Small), OL),
+      TLOF(std::make_unique<TargetLoweringObjectFileELF>()) {
+  initAsmInfo();
+};
+
+TargetPassConfig *TOYTargetMachine::createPassConfig(PassManagerBase &PM) {
+  return new TargetPassConfig(*this, PM);
+}
diff --git a/llvm/lib/Target/Toy/ToyTargetMachine.h b/llvm/lib/Target/Toy/ToyTargetMachine.h
new file mode 100644
index 000000000000..24f0da3a4270
--- /dev/null
+++ b/llvm/lib/Target/Toy/ToyTargetMachine.h
@@ -0,0 +1,26 @@
+#ifndef LLVM_LIB_TARGET_TOY_TargetMachine_H
+#define LLVM_LIB_TARGET_TOY_TargetMachine_H
+
+#include "llvm/Target/TargetMachine.h"
+#include <memory>
+#include <optional>
+
+using namespace llvm;
+
+class TOYTargetMachine : public LLVMTargetMachine {
+  std::unique_ptr<TargetLoweringObjectFile> TLOF;
+
+public:
+  TOYTargetMachine(Target const &T, Triple const &TT, StringRef CPU,
+                   StringRef FS, TargetOptions const &Options,
+                   std::optional<Reloc::Model> RM,
+                   std::optional<CodeModel::Model> CM, CodeGenOpt::Level OL,
+                   bool JIT);
+
+  TargetPassConfig *createPassConfig(PassManagerBase &PM) override;
+  TargetLoweringObjectFile *getObjFileLowering() const override {
+    return TLOF.get();
+  }
+};
+
+#endif // LLVM_LIB_TARGET_TOY_TargetMachine_H
diff --git a/llvm/lib/TargetParser/Triple.cpp b/llvm/lib/TargetParser/Triple.cpp
index a68035989a93..584a9f701078 100644
--- a/llvm/lib/TargetParser/Triple.cpp
+++ b/llvm/lib/TargetParser/Triple.cpp
@@ -81,6 +81,7 @@ StringRef Triple::getArchTypeName(ArchType Kind) {
   case wasm32:         return "wasm32";
   case wasm64:         return "wasm64";
   case x86:            return "i386";
+  case toy:            return "toy";
   case x86_64:         return "x86_64";
   case xcore:          return "xcore";
   case xtensa:         return "xtensa";
@@ -854,6 +855,7 @@ static Triple::ObjectFormatType getDefaultFormat(const Triple &T) {
   case Triple::thumbeb:
   case Triple::ve:
   case Triple::xcore:
+  case Triple::toy:
   case Triple::xtensa:
     return Triple::ELF;
 
@@ -1434,6 +1436,7 @@ static unsigned getArchPointerBitWidth(llvm::Triple::ArchType Arch) {
   case llvm::Triple::thumbeb:
   case llvm::Triple::wasm32:
   case llvm::Triple::x86:
+  case llvm::Triple::toy:
   case llvm::Triple::xcore:
   case llvm::Triple::xtensa:
     return 32;
@@ -1524,6 +1527,7 @@ Triple Triple::get32BitArchVariant() const {
   case Triple::thumb:
   case Triple::thumbeb:
   case Triple::wasm32:
+  case Triple::toy:
   case Triple::x86:
   case Triple::xcore:
   case Triple::xtensa:
@@ -1577,6 +1581,7 @@ Triple Triple::get64BitArchVariant() const {
   case Triple::tce:
   case Triple::tcele:
   case Triple::xcore:
+  case Triple::toy:
   case Triple::xtensa:
     T.setArch(UnknownArch);
     break;
