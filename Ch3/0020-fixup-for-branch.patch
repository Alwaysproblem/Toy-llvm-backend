diff --git a/llvm/lib/Target/Toy/ToyMCInstLower.cpp b/llvm/lib/Target/Toy/ToyMCInstLower.cpp
index 813bd51359dc..0547a49cb9e0 100644
--- a/llvm/lib/Target/Toy/ToyMCInstLower.cpp
+++ b/llvm/lib/Target/Toy/ToyMCInstLower.cpp
@@ -9,12 +9,14 @@
 #include "ToyMCInstLower.h"
 #include "MCTargetDesc/ToyBaseInfo.h"
 #include "MCTargetDesc/ToyMCExpr.h"
+#include "MCTargetDesc/ToyMCTargetDesc.h"
 #include "llvm/CodeGen/AsmPrinter.h"
 #include "llvm/CodeGen/MachineFunction.h"
 #include "llvm/CodeGen/MachineInstr.h"
 #include "llvm/CodeGen/MachineOperand.h"
 #include "llvm/MC/MCInst.h"
 #include "llvm/MC/MCStreamer.h"
+#include "llvm/Support/Debug.h"
 
 using namespace llvm;
 
@@ -26,6 +28,13 @@ MCOperand ToyMCInstLower::LowerSymbolOperand(const MachineOperand &MO) const {
   ToyMCExpr::ToyExprKind TargetKind = ToyMCExpr::TEK_NONE;
   const MCSymbol *Symbol;
 
+  unsigned IsBranch = 0;
+  unsigned int Opcode = MO.getParent()->getOpcode();
+  if (Opcode == Toy::BLT || Opcode == Toy::BEQ || Opcode == Toy::BNE ||
+      Opcode == Toy::BGE) {
+    IsBranch = 1;
+  }
+
   switch (MO.getTargetFlags()) {
   default:
     llvm_unreachable("Invalid target flag!");
@@ -42,6 +51,7 @@ MCOperand ToyMCInstLower::LowerSymbolOperand(const MachineOperand &MO) const {
   switch (MO.getType()) {
   case MachineOperand::MO_MachineBasicBlock:
     Symbol = MO.getMBB()->getSymbol();
+    TargetKind = IsBranch ? ToyMCExpr::TEK_BRANCH : ToyMCExpr::TEK_JAL;
     break;
   case MachineOperand::MO_GlobalAddress:
     Symbol = Printer.getSymbol(MO.getGlobal());
@@ -74,7 +84,7 @@ MCOperand ToyMCInstLower::lowerOperand(const MachineOperand &MO) const {
   case MachineOperand::MO_Immediate:
     return MCOperand::createImm(MO.getImm());
   case MachineOperand::MO_MachineBasicBlock:
-   case MachineOperand::MO_GlobalAddress:
+  case MachineOperand::MO_GlobalAddress:
   case MachineOperand::MO_ExternalSymbol:
   case MachineOperand::MO_MCSymbol:
   case MachineOperand::MO_JumpTableIndex:
