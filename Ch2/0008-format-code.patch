diff --git a/llvm/lib/Target/Toy/AsmParser/ToyAsmParser.cpp b/llvm/lib/Target/Toy/AsmParser/ToyAsmParser.cpp
index 63a9d6066594..2b1d4781eb16 100644
--- a/llvm/lib/Target/Toy/AsmParser/ToyAsmParser.cpp
+++ b/llvm/lib/Target/Toy/AsmParser/ToyAsmParser.cpp
@@ -62,49 +62,38 @@ class ToyOperand : public MCParsedAsmOperand {
     if (!Expr)
       Inst.addOperand(MCOperand::createImm(0));
     else if (auto *CE = dyn_cast<MCConstantExpr>(Expr))
-      Inst.addOperand(
-          MCOperand::createImm(CE->getValue()));
+      Inst.addOperand(MCOperand::createImm(CE->getValue()));
     else
       Inst.addOperand(MCOperand::createExpr(Expr));
   }
 
 public:
-  ToyOperand(OperandKind Kind, SMLoc StartLoc,
-              SMLoc EndLoc)
-      : Kind(Kind), StartLoc(StartLoc), EndLoc(EndLoc) {
-  }
+  ToyOperand(OperandKind Kind, SMLoc StartLoc, SMLoc EndLoc)
+      : Kind(Kind), StartLoc(StartLoc), EndLoc(EndLoc) {}
 
   // getStartLoc - Gets location of the first token of
   // this operand
-  SMLoc getStartLoc() const override {
-    return StartLoc;
-  }
+  SMLoc getStartLoc() const override { return StartLoc; }
 
   // getEndLoc - Gets location of the last token of this
   // operand
   SMLoc getEndLoc() const override { return EndLoc; }
 
-  bool isReg() const override {
-    return Kind == OpKind_Reg;
-  }
+  bool isReg() const override { return Kind == OpKind_Reg; }
 
   unsigned getReg() const override {
     assert(isReg() && "Invalid type access!");
     return RegNo;
   }
 
-  bool isImm() const override {
-    return Kind == OpKind_Imm;
-  }
+  bool isImm() const override { return Kind == OpKind_Imm; }
 
   const MCExpr *getImm() const {
     assert(isImm() && "Invalid type access!");
     return Imm;
   }
 
-  bool isToken() const override {
-    return Kind == OpKind_Token;
-  }
+  bool isToken() const override { return Kind == OpKind_Token; }
 
   StringRef getToken() const {
     assert(isToken() && "Not a token");
@@ -113,28 +102,22 @@ public:
 
   bool isMem() const override { return false; }
 
-  static std::unique_ptr<ToyOperand>
-  createToken(StringRef Str, SMLoc Loc) {
-    auto Op = std::make_unique<ToyOperand>(
-        OpKind_Token, Loc, Loc);
+  static std::unique_ptr<ToyOperand> createToken(StringRef Str, SMLoc Loc) {
+    auto Op = std::make_unique<ToyOperand>(OpKind_Token, Loc, Loc);
     Op->Token = Str;
     return Op;
   }
 
-  static std::unique_ptr<ToyOperand>
-  createReg(unsigned Num, SMLoc StartLoc,
-            SMLoc EndLoc) {
-    auto Op = std::make_unique<ToyOperand>(
-        OpKind_Reg, StartLoc, EndLoc);
+  static std::unique_ptr<ToyOperand> createReg(unsigned Num, SMLoc StartLoc,
+                                               SMLoc EndLoc) {
+    auto Op = std::make_unique<ToyOperand>(OpKind_Reg, StartLoc, EndLoc);
     Op->RegNo = Num;
     return Op;
   }
 
-  static std::unique_ptr<ToyOperand>
-  createImm(const MCExpr *Expr, SMLoc StartLoc,
-            SMLoc EndLoc) {
-    auto Op = std::make_unique<ToyOperand>(
-        OpKind_Imm, StartLoc, EndLoc);
+  static std::unique_ptr<ToyOperand> createImm(const MCExpr *Expr,
+                                               SMLoc StartLoc, SMLoc EndLoc) {
+    auto Op = std::make_unique<ToyOperand>(OpKind_Imm, StartLoc, EndLoc);
     Op->Imm = Expr;
     return Op;
   }
@@ -160,9 +143,7 @@ public:
       OS << "Token: " << getToken() << "\n";
       break;
     case OpKind_Reg:
-      OS << "Reg: "
-         << ToyInstPrinter::getRegisterName(getReg())
-         << "\n";
+      OS << "Reg: " << ToyInstPrinter::getRegisterName(getReg()) << "\n";
       break;
     }
   }
@@ -176,37 +157,29 @@ class ToyAsmParser : public MCTargetAsmParser {
   MCAsmParser &Parser;
   const MCSubtargetInfo &SubtargetInfo;
 
-  bool
-  ParseInstruction(ParseInstructionInfo &Info,
-                   StringRef Name, SMLoc NameLoc,
-                   OperandVector &Operands) override;
+  bool ParseInstruction(ParseInstructionInfo &Info, StringRef Name,
+                        SMLoc NameLoc, OperandVector &Operands) override;
   bool parseRegister(MCRegister &RegNo, SMLoc &StartLoc,
                      SMLoc &EndLoc) override;
-  OperandMatchResultTy
-  tryParseRegister(MCRegister &RegNo, SMLoc &StartLoc,
-                   SMLoc &EndLoc) override;
+  OperandMatchResultTy tryParseRegister(MCRegister &RegNo, SMLoc &StartLoc,
+                                        SMLoc &EndLoc) override;
 
-  bool parseRegister(MCRegister &RegNo, SMLoc &StartLoc,
-                     SMLoc &EndLoc,
+  bool parseRegister(MCRegister &RegNo, SMLoc &StartLoc, SMLoc &EndLoc,
                      bool RestoreOnFailure);
-  bool parseOperand(OperandVector &Operands,
-                    StringRef Mnemonic);
+  bool parseOperand(OperandVector &Operands, StringRef Mnemonic);
 
-  bool MatchAndEmitInstruction(
-      SMLoc IdLoc, unsigned &Opcode,
-      OperandVector &Operands, MCStreamer &Out,
-      uint64_t &ErrorInfo,
-      bool MatchingInlineAsm) override;
+  bool MatchAndEmitInstruction(SMLoc IdLoc, unsigned &Opcode,
+                               OperandVector &Operands, MCStreamer &Out,
+                               uint64_t &ErrorInfo,
+                               bool MatchingInlineAsm) override;
 
 public:
-  ToyAsmParser(const MCSubtargetInfo &STI,
-                MCAsmParser &Parser,
-                const MCInstrInfo &MII,
-                const MCTargetOptions &Options)
-      : MCTargetAsmParser(Options, STI, MII),
-        Parser(Parser), SubtargetInfo(STI) {
-    setAvailableFeatures(ComputeAvailableFeatures(
-        SubtargetInfo.getFeatureBits()));
+  ToyAsmParser(const MCSubtargetInfo &STI, MCAsmParser &Parser,
+               const MCInstrInfo &MII, const MCTargetOptions &Options)
+      : MCTargetAsmParser(Options, STI, MII), Parser(Parser),
+        SubtargetInfo(STI) {
+    setAvailableFeatures(
+        ComputeAvailableFeatures(SubtargetInfo.getFeatureBits()));
   }
 };
 
@@ -216,33 +189,28 @@ public:
 #define GET_MATCHER_IMPLEMENTATION
 #include "ToyGenAsmMatcher.inc"
 
-bool ToyAsmParser::ParseInstruction(
-    ParseInstructionInfo &Info, StringRef Name,
-    SMLoc NameLoc, OperandVector &Operands) {
+bool ToyAsmParser::ParseInstruction(ParseInstructionInfo &Info, StringRef Name,
+                                    SMLoc NameLoc, OperandVector &Operands) {
   // First operand in MCInst is instruction mnemonic.
-  Operands.push_back(
-      ToyOperand::createToken(Name, NameLoc));
+  Operands.push_back(ToyOperand::createToken(Name, NameLoc));
 
   // Read the remaining operands.
   if (getLexer().isNot(AsmToken::EndOfStatement)) {
 
     // Read the first operand.
     if (parseOperand(Operands, Name)) {
-      return Error(getLexer().getLoc(),
-                   "expected operand");
+      return Error(getLexer().getLoc(), "expected operand");
     }
 
     // Read the following operands.
     while (getLexer().is(AsmToken::Comma)) {
       Parser.Lex();
       if (parseOperand(Operands, Name)) {
-        return Error(getLexer().getLoc(),
-                     "expected operand");
+        return Error(getLexer().getLoc(), "expected operand");
       }
     }
     if (getLexer().isNot(AsmToken::EndOfStatement))
-      return Error(getLexer().getLoc(),
-                   "unexpected token in argument list");
+      return Error(getLexer().getLoc(), "unexpected token in argument list");
   }
 
   // Consume the EndOfStatement.
@@ -250,8 +218,7 @@ bool ToyAsmParser::ParseInstruction(
   return false;
 }
 
-bool ToyAsmParser::parseOperand(
-    OperandVector &Operands, StringRef Mnemonic) {
+bool ToyAsmParser::parseOperand(OperandVector &Operands, StringRef Mnemonic) {
   // Check if it is a register.
   if (Parser.getTok().is(AsmToken::Identifier)) {
     MCRegister RegNo;
@@ -259,8 +226,7 @@ bool ToyAsmParser::parseOperand(
     if (parseRegister(RegNo, StartLoc, EndLoc,
                       /*RestoreOnFailure=*/false))
       return true;
-    Operands.push_back(ToyOperand::createReg(
-        RegNo, StartLoc, EndLoc));
+    Operands.push_back(ToyOperand::createReg(RegNo, StartLoc, EndLoc));
     return false;
   }
 
@@ -271,8 +237,7 @@ bool ToyAsmParser::parseOperand(
     if (Parser.parseExpression(Expr))
       return true;
     SMLoc EndLoc = Parser.getTok().getLoc();
-    Operands.push_back(
-        ToyOperand::createImm(Expr, StartLoc, EndLoc));
+    Operands.push_back(ToyOperand::createImm(Expr, StartLoc, EndLoc));
     return false;
   }
   // Failure
@@ -280,9 +245,8 @@ bool ToyAsmParser::parseOperand(
 }
 
 // Parses register of form %(r|x|cr|fcr)<No>.
-bool ToyAsmParser::parseRegister(
-    MCRegister &RegNo, SMLoc &StartLoc, SMLoc &EndLoc,
-    bool RestoreOnFailure) {
+bool ToyAsmParser::parseRegister(MCRegister &RegNo, SMLoc &StartLoc,
+                                 SMLoc &EndLoc, bool RestoreOnFailure) {
   StartLoc = Parser.getTok().getLoc();
 
   // Eat the '%' prefix.
@@ -292,8 +256,7 @@ bool ToyAsmParser::parseRegister(
   // Parser.Lex();
   // Match the register.
   if (Parser.getTok().isNot(AsmToken::Identifier) ||
-      (RegNo = MatchRegisterName(
-           Parser.getTok().getIdentifier())) == 0) {
+      (RegNo = MatchRegisterName(Parser.getTok().getIdentifier())) == 0) {
     // if (RestoreOnFailure)
     //   Parser.getLexer().UnLex(PercentTok);
     return Error(StartLoc, "invalid register");
@@ -304,18 +267,17 @@ bool ToyAsmParser::parseRegister(
   return false;
 }
 
-bool ToyAsmParser::parseRegister(MCRegister &RegNo,
-                                  SMLoc &StartLoc,
-                                  SMLoc &EndLoc) {
+bool ToyAsmParser::parseRegister(MCRegister &RegNo, SMLoc &StartLoc,
+                                 SMLoc &EndLoc) {
   return parseRegister(RegNo, StartLoc, EndLoc,
                        /*RestoreOnFailure=*/false);
 }
 
-OperandMatchResultTy ToyAsmParser::tryParseRegister(
-    MCRegister &RegNo, SMLoc &StartLoc, SMLoc &EndLoc) {
-  bool Result =
-      parseRegister(RegNo, StartLoc, EndLoc,
-                    /*RestoreOnFailure=*/true);
+OperandMatchResultTy ToyAsmParser::tryParseRegister(MCRegister &RegNo,
+                                                    SMLoc &StartLoc,
+                                                    SMLoc &EndLoc) {
+  bool Result = parseRegister(RegNo, StartLoc, EndLoc,
+                              /*RestoreOnFailure=*/true);
   bool PendingErrors = getParser().hasPendingError();
   getParser().clearPendingErrors();
   if (PendingErrors)
@@ -325,15 +287,14 @@ OperandMatchResultTy ToyAsmParser::tryParseRegister(
   return MatchOperand_Success;
 }
 
-bool ToyAsmParser::MatchAndEmitInstruction(
-    SMLoc IdLoc, unsigned &Opcode,
-    OperandVector &Operands, MCStreamer &Out,
-    uint64_t &ErrorInfo, bool MatchingInlineAsm) {
+bool ToyAsmParser::MatchAndEmitInstruction(SMLoc IdLoc, unsigned &Opcode,
+                                           OperandVector &Operands,
+                                           MCStreamer &Out, uint64_t &ErrorInfo,
+                                           bool MatchingInlineAsm) {
   MCInst Inst;
   SMLoc ErrorLoc;
 
-  switch (MatchInstructionImpl(
-      Operands, Inst, ErrorInfo, MatchingInlineAsm)) {
+  switch (MatchInstructionImpl(Operands, Inst, ErrorInfo, MatchingInlineAsm)) {
   case Match_Success:
     Out.emitInstruction(Inst, SubtargetInfo);
     Opcode = Inst.getOpcode();
@@ -342,22 +303,18 @@ bool ToyAsmParser::MatchAndEmitInstruction(
     return Error(IdLoc, "Instruction use requires "
                         "option to be enabled");
   case Match_MnemonicFail:
-    return Error(IdLoc,
-                 "Unrecognized instruction mnemonic");
+    return Error(IdLoc, "Unrecognized instruction mnemonic");
   case Match_InvalidOperand: {
     ErrorLoc = IdLoc;
     if (ErrorInfo != ~0U) {
       if (ErrorInfo >= Operands.size())
-        return Error(
-            IdLoc, "Too few operands for instruction");
+        return Error(IdLoc, "Too few operands for instruction");
 
-      ErrorLoc = ((ToyOperand &)*Operands[ErrorInfo])
-                     .getStartLoc();
+      ErrorLoc = ((ToyOperand &)*Operands[ErrorInfo]).getStartLoc();
       if (ErrorLoc == SMLoc())
         ErrorLoc = IdLoc;
     }
-    return Error(ErrorLoc,
-                 "Invalid operand for instruction");
+    return Error(ErrorLoc, "Invalid operand for instruction");
   }
   default:
     break;
@@ -366,8 +323,6 @@ bool ToyAsmParser::MatchAndEmitInstruction(
   llvm_unreachable("Unknown match type detected!");
 }
 
-extern "C" LLVM_EXTERNAL_VISIBILITY void
-LLVMInitializeToyAsmParser() {
-  RegisterMCAsmParser<ToyAsmParser> X(
-      getTheToyTarget());
+extern "C" LLVM_EXTERNAL_VISIBILITY void LLVMInitializeToyAsmParser() {
+  RegisterMCAsmParser<ToyAsmParser> X(getTheToyTarget());
 }
diff --git a/llvm/lib/Target/Toy/Disassembler/ToyDisassembler.cpp b/llvm/lib/Target/Toy/Disassembler/ToyDisassembler.cpp
index d98fbbb4e268..3d4ea3f58fc7 100644
--- a/llvm/lib/Target/Toy/Disassembler/ToyDisassembler.cpp
+++ b/llvm/lib/Target/Toy/Disassembler/ToyDisassembler.cpp
@@ -39,8 +39,8 @@ public:
 } // end anonymous namespace
 
 static MCDisassembler *createToyDisassembler(const Target &T,
-                                              const MCSubtargetInfo &STI,
-                                              MCContext &Ctx) {
+                                             const MCSubtargetInfo &STI,
+                                             MCContext &Ctx) {
   return new ToyDisassembler(STI, Ctx);
 }
 
@@ -51,24 +51,9 @@ extern "C" LLVM_EXTERNAL_VISIBILITY void LLVMInitializeToyDisassembler() {
 }
 
 static const uint16_t GPRDecoderTable[] = {
-    Toy::ZERO,
-    Toy::RA,
-    Toy::SP,
-    0,
-    0,
-    Toy::T0,
-    Toy::T1,
-    Toy::T2,
-    Toy::S0,
-    Toy::S1,
-    Toy::A0,
-    Toy::A1,
-    Toy::A2,
-    Toy::A3,
-    Toy::A4,
-    Toy::A5,
-    Toy::A6,
-    Toy::A7,
+    Toy::ZERO, Toy::RA, Toy::SP, 0,       0,       Toy::T0,
+    Toy::T1,   Toy::T2, Toy::S0, Toy::S1, Toy::A0, Toy::A1,
+    Toy::A2,   Toy::A3, Toy::A4, Toy::A5, Toy::A6, Toy::A7,
 };
 
 static DecodeStatus DecodeGPRRegisterClass(MCInst &Inst, uint64_t RegNo,
@@ -85,9 +70,9 @@ static DecodeStatus DecodeGPRRegisterClass(MCInst &Inst, uint64_t RegNo,
 #include "ToyGenDisassemblerTables.inc"
 
 DecodeStatus ToyDisassembler::getInstruction(MCInst &MI, uint64_t &Size,
-                                              ArrayRef<uint8_t> Bytes,
-                                              uint64_t Address,
-                                              raw_ostream &CS) const {
+                                             ArrayRef<uint8_t> Bytes,
+                                             uint64_t Address,
+                                             raw_ostream &CS) const {
   // Instruction size is always 32 bit.
   if (Bytes.size() < 4) {
     Size = 0;
diff --git a/llvm/lib/Target/Toy/MCTargetDesc/ToyMCTargetDesc.cpp b/llvm/lib/Target/Toy/MCTargetDesc/ToyMCTargetDesc.cpp
index 841bbcc23cb2..3fbb12134e3c 100644
--- a/llvm/lib/Target/Toy/MCTargetDesc/ToyMCTargetDesc.cpp
+++ b/llvm/lib/Target/Toy/MCTargetDesc/ToyMCTargetDesc.cpp
@@ -7,9 +7,9 @@
 //===----------------------------------------------------------------------===//
 
 #include "ToyMCTargetDesc.h"
+#include "TargetInfo/ToyTargetInfo.h"
 #include "ToyInstPrinter.h"
 #include "ToyMCAsmInfo.h"
-#include "TargetInfo/ToyTargetInfo.h"
 #include "llvm/CodeGen/TargetRegisterInfo.h"
 #include "llvm/MC/MCInstrInfo.h"
 #include "llvm/MC/MCRegisterInfo.h"
@@ -41,22 +41,22 @@ static MCRegisterInfo *createToyMCRegisterInfo(const Triple &TT) {
 }
 
 static MCSubtargetInfo *createToyMCSubtargetInfo(const Triple &TT,
-                                                  StringRef CPU, StringRef FS) {
+                                                 StringRef CPU, StringRef FS) {
   return createToyMCSubtargetInfoImpl(TT, CPU, /*TuneCPU*/ CPU, FS);
 }
 
 static MCAsmInfo *createToyMCAsmInfo(const MCRegisterInfo &MRI,
-                                      const Triple &TT,
-                                      const MCTargetOptions &Options) {
+                                     const Triple &TT,
+                                     const MCTargetOptions &Options) {
   MCAsmInfo *MAI = new ToyMCAsmInfo(TT);
   return MAI;
 }
 
 static MCInstPrinter *createToyMCInstPrinter(const Triple &T,
-                                              unsigned SyntaxVariant,
-                                              const MCAsmInfo &MAI,
-                                              const MCInstrInfo &MII,
-                                              const MCRegisterInfo &MRI) {
+                                             unsigned SyntaxVariant,
+                                             const MCAsmInfo &MAI,
+                                             const MCInstrInfo &MII,
+                                             const MCRegisterInfo &MRI) {
   return new ToyInstPrinter(MAI, MII, MRI);
 }
 
@@ -68,11 +68,9 @@ extern "C" LLVM_EXTERNAL_VISIBILITY void LLVMInitializeToyTargetMC() {
   TargetRegistry::RegisterMCCodeEmitter(getTheToyTarget(),
                                         createToyMCCodeEmitter);
   // Register the MCInstrInfo.
-  TargetRegistry::RegisterMCInstrInfo(getTheToyTarget(),
-                                      createToyMCInstrInfo);
+  TargetRegistry::RegisterMCInstrInfo(getTheToyTarget(), createToyMCInstrInfo);
   // Register the MCRegisterInfo.
-  TargetRegistry::RegisterMCRegInfo(getTheToyTarget(),
-                                    createToyMCRegisterInfo);
+  TargetRegistry::RegisterMCRegInfo(getTheToyTarget(), createToyMCRegisterInfo);
   // Register the MCSubtargetInfo.
   TargetRegistry::RegisterMCSubtargetInfo(getTheToyTarget(),
                                           createToyMCSubtargetInfo);
diff --git a/llvm/lib/Target/Toy/MCTargetDesc/ToyMCTargetDesc.h b/llvm/lib/Target/Toy/MCTargetDesc/ToyMCTargetDesc.h
index 999d38aeede4..ccded32ab4a6 100644
--- a/llvm/lib/Target/Toy/MCTargetDesc/ToyMCTargetDesc.h
+++ b/llvm/lib/Target/Toy/MCTargetDesc/ToyMCTargetDesc.h
@@ -29,13 +29,11 @@ class Triple;
 class raw_pwrite_stream;
 class raw_ostream;
 
-MCCodeEmitter *createToyMCCodeEmitter(const MCInstrInfo &MCII,
-                                       MCContext &Ctx);
+MCCodeEmitter *createToyMCCodeEmitter(const MCInstrInfo &MCII, MCContext &Ctx);
 
-MCAsmBackend *createToyMCAsmBackend(const Target &T,
-                                     const MCSubtargetInfo &STI,
-                                     const MCRegisterInfo &MRI,
-                                     const MCTargetOptions &Options);
+MCAsmBackend *createToyMCAsmBackend(const Target &T, const MCSubtargetInfo &STI,
+                                    const MCRegisterInfo &MRI,
+                                    const MCTargetOptions &Options);
 
 std::unique_ptr<MCObjectTargetWriter> createToyObjectWriter(uint8_t OSABI);
 } // end namespace llvm
diff --git a/llvm/lib/Target/Toy/ToyAsmPrinter.cpp b/llvm/lib/Target/Toy/ToyAsmPrinter.cpp
index a2075816b1e7..422a19e5e9a3 100644
--- a/llvm/lib/Target/Toy/ToyAsmPrinter.cpp
+++ b/llvm/lib/Target/Toy/ToyAsmPrinter.cpp
@@ -11,9 +11,9 @@
 //
 //===----------------------------------------------------------------------===//
 
-#include "ToyMCInstLower.h"
 #include "MCTargetDesc/ToyMCTargetDesc.h"
 #include "TargetInfo/ToyTargetInfo.h"
+#include "ToyMCInstLower.h"
 #include "llvm/CodeGen/AsmPrinter.h"
 #include "llvm/CodeGen/MachineInstr.h"
 #include "llvm/CodeGen/TargetLoweringObjectFileImpl.h"
@@ -31,14 +31,11 @@ using namespace llvm;
 namespace {
 class ToyAsmPrinter : public AsmPrinter {
 public:
-  explicit ToyAsmPrinter(
-      TargetMachine &TM,
-      std::unique_ptr<MCStreamer> Streamer)
+  explicit ToyAsmPrinter(TargetMachine &TM,
+                         std::unique_ptr<MCStreamer> Streamer)
       : AsmPrinter(TM, std::move(Streamer)) {}
 
-  StringRef getPassName() const override {
-    return "Toy Assembly Printer";
-  }
+  StringRef getPassName() const override { return "Toy Assembly Printer"; }
   bool emitPseudoExpansionLowering(MCStreamer &OutStreamer,
                                    const MachineInstr *MI);
   bool lowerOperand(const MachineOperand &MO, MCOperand &MCOp) const {
@@ -52,8 +49,7 @@ public:
 
 #include "ToyGenMCPseudoLowering.inc"
 
-void ToyAsmPrinter::emitInstruction(
-    const MachineInstr *MI) {
+void ToyAsmPrinter::emitInstruction(const MachineInstr *MI) {
   if (emitPseudoExpansionLowering(*OutStreamer, MI))
     return;
   MCInst LoweredMI;
@@ -63,8 +59,6 @@ void ToyAsmPrinter::emitInstruction(
 }
 
 // Force static initialization.
-extern "C" LLVM_EXTERNAL_VISIBILITY void
-LLVMInitializeToyAsmPrinter() {
-  RegisterAsmPrinter<ToyAsmPrinter> X(
-      getTheToyTarget());
+extern "C" LLVM_EXTERNAL_VISIBILITY void LLVMInitializeToyAsmPrinter() {
+  RegisterAsmPrinter<ToyAsmPrinter> X(getTheToyTarget());
 }
diff --git a/llvm/lib/Target/Toy/ToyFrameLowering.h b/llvm/lib/Target/Toy/ToyFrameLowering.h
index 76ee9db5db8b..7b11b7dad071 100644
--- a/llvm/lib/Target/Toy/ToyFrameLowering.h
+++ b/llvm/lib/Target/Toy/ToyFrameLowering.h
@@ -20,12 +20,8 @@ class ToyFrameLowering : public TargetFrameLowering {
 public:
   ToyFrameLowering();
 
-  void
-  emitPrologue(MachineFunction &MF,
-               MachineBasicBlock &MBB) const override;
-  void
-  emitEpilogue(MachineFunction &MF,
-               MachineBasicBlock &MBB) const override;
+  void emitPrologue(MachineFunction &MF, MachineBasicBlock &MBB) const override;
+  void emitEpilogue(MachineFunction &MF, MachineBasicBlock &MBB) const override;
   bool hasFP(const MachineFunction &MF) const override;
 };
 } // end namespace llvm
diff --git a/llvm/lib/Target/Toy/ToyISelDAGToDAG.cpp b/llvm/lib/Target/Toy/ToyISelDAGToDAG.cpp
index a1c3f2a70f3e..5300fdd1f918 100644
--- a/llvm/lib/Target/Toy/ToyISelDAGToDAG.cpp
+++ b/llvm/lib/Target/Toy/ToyISelDAGToDAG.cpp
@@ -1,5 +1,5 @@
 //===-- ToyISelDAGToDAG.cpp - A dag to dag inst
-//selector for Toy --------===//
+// selector for Toy --------===//
 //
 // Part of the LLVM Project, under the Apache License
 // v2.0 with LLVM Exceptions. See
@@ -14,9 +14,9 @@
 //
 //===----------------------------------------------------------------------===//
 
+#include "MCTargetDesc/ToyMCTargetDesc.h"
 #include "Toy.h"
 #include "ToyTargetMachine.h"
-#include "MCTargetDesc/ToyMCTargetDesc.h"
 #include "llvm/CodeGen/SelectionDAGISel.h"
 #include "llvm/Pass.h"
 #include "llvm/Support/Debug.h"
@@ -24,8 +24,7 @@
 using namespace llvm;
 
 #define DEBUG_TYPE "Toy-isel"
-#define PASS_NAME                                      \
-  "Toy DAG->DAG Pattern Instruction Selection"
+#define PASS_NAME "Toy DAG->DAG Pattern Instruction Selection"
 
 namespace {
 
@@ -33,8 +32,7 @@ class ToyDAGToDAGISel : public SelectionDAGISel {
 public:
   static char ID;
 
-  ToyDAGToDAGISel(ToyTargetMachine &TM,
-                   CodeGenOpt::Level OptLevel)
+  ToyDAGToDAGISel(ToyTargetMachine &TM, CodeGenOpt::Level OptLevel)
       : SelectionDAGISel(ID, TM, OptLevel) {}
 
   // Override SelectionDAGISel.
@@ -48,12 +46,10 @@ public:
 
 char ToyDAGToDAGISel::ID = 0;
 
-INITIALIZE_PASS(ToyDAGToDAGISel, DEBUG_TYPE, PASS_NAME,
-                false, false)
+INITIALIZE_PASS(ToyDAGToDAGISel, DEBUG_TYPE, PASS_NAME, false, false)
 
-FunctionPass *
-llvm::createToyISelDag(ToyTargetMachine &TM,
-                        CodeGenOpt::Level OptLevel) {
+FunctionPass *llvm::createToyISelDag(ToyTargetMachine &TM,
+                                     CodeGenOpt::Level OptLevel) {
   return new ToyDAGToDAGISel(TM, OptLevel);
 }
 
diff --git a/llvm/lib/Target/Toy/ToyInstrInfo.cpp b/llvm/lib/Target/Toy/ToyInstrInfo.cpp
index a99f0cfe144c..bbbb3e012803 100644
--- a/llvm/lib/Target/Toy/ToyInstrInfo.cpp
+++ b/llvm/lib/Target/Toy/ToyInstrInfo.cpp
@@ -11,8 +11,8 @@
 //===----------------------------------------------------------------------===//
 
 #include "ToyInstrInfo.h"
-#include "ToySubtarget.h"
 #include "MCTargetDesc/ToyMCTargetDesc.h"
+#include "ToySubtarget.h"
 #include "llvm/CodeGen/LiveIntervals.h"
 #include "llvm/CodeGen/LiveVariables.h"
 #include "llvm/CodeGen/MachineBasicBlock.h"
@@ -33,5 +33,4 @@ using namespace llvm;
 // Pin the vtable to this file.
 void ToyInstrInfo::anchor() {}
 
-ToyInstrInfo::ToyInstrInfo(ToySubtarget &STI)
-    : ToyGenInstrInfo(), STI(STI) {}
+ToyInstrInfo::ToyInstrInfo(ToySubtarget &STI) : ToyGenInstrInfo(), STI(STI) {}
diff --git a/llvm/lib/Target/Toy/ToyMCInstLower.cpp b/llvm/lib/Target/Toy/ToyMCInstLower.cpp
index 270b6fc54d9b..3fbc074f80b3 100644
--- a/llvm/lib/Target/Toy/ToyMCInstLower.cpp
+++ b/llvm/lib/Target/Toy/ToyMCInstLower.cpp
@@ -15,8 +15,7 @@
 
 using namespace llvm;
 
-MCOperand ToyMCInstLower::lowerOperand(
-    const MachineOperand &MO) const {
+MCOperand ToyMCInstLower::lowerOperand(const MachineOperand &MO) const {
   switch (MO.getType()) {
   case MachineOperand::MO_Register:
     return MCOperand::createReg(MO.getReg());
@@ -29,8 +28,7 @@ MCOperand ToyMCInstLower::lowerOperand(
   }
 }
 
-void ToyMCInstLower::lower(const MachineInstr *MI,
-                            MCInst &OutMI) const {
+void ToyMCInstLower::lower(const MachineInstr *MI, MCInst &OutMI) const {
   OutMI.setOpcode(MI->getOpcode());
   for (auto &MO : MI->operands()) {
     // Ignore all implicit register operands.
diff --git a/llvm/lib/Target/Toy/ToySubtarget.cpp b/llvm/lib/Target/Toy/ToySubtarget.cpp
index 737405cee816..4ca407a9aa0e 100644
--- a/llvm/lib/Target/Toy/ToySubtarget.cpp
+++ b/llvm/lib/Target/Toy/ToySubtarget.cpp
@@ -29,4 +29,4 @@ void ToySubtarget::anchor() {}
 ToySubtarget::ToySubtarget(const Triple &TT, const std::string &CPU,
                            const std::string &FS, const TargetMachine &TM)
     : ToyGenSubtargetInfo(TT, CPU, /*TuneCPU*/ CPU, FS), InstrInfo(*this),
-      TLInfo(TM, *this), FrameLowering(), RegisterInfo(*this, getHwMode()){}
+      TLInfo(TM, *this), FrameLowering(), RegisterInfo(*this, getHwMode()) {}
diff --git a/llvm/lib/Target/Toy/ToyTargetMachine.cpp b/llvm/lib/Target/Toy/ToyTargetMachine.cpp
index b424db5c628e..3a3687cd6bee 100644
--- a/llvm/lib/Target/Toy/ToyTargetMachine.cpp
+++ b/llvm/lib/Target/Toy/ToyTargetMachine.cpp
@@ -27,12 +27,9 @@ extern "C" LLVM_EXTERNAL_VISIBILITY void LLVMInitializeToyTarget() {
   initializeToyDAGToDAGISelPass(PR);
 }
 
-
 namespace {
 // TODO: Check.
-std::string computeDataLayout(const Triple &TT,
-                              StringRef CPU,
-                              StringRef FS) {
+std::string computeDataLayout(const Triple &TT, StringRef CPU, StringRef FS) {
   std::string Ret;
 
   // Big endian.
@@ -48,11 +45,11 @@ std::string computeDataLayout(const Triple &TT,
   Ret += "-i8:8:32-i16:16:32-i64:64";
 
   // Floats and doubles are also naturally aligned.
-  // Ret += "-f32:32:32-f64:64:64";
+  Ret += "-f32:32:32-f64:64:64";
 
   // We prefer 16 bits of aligned for all globals; see
   // above.
-  // Ret += "-a:8:16";
+  Ret += "-a:8:16";
 
   // Integer registers are 32bits.
   Ret += "-n32";
@@ -64,35 +61,29 @@ std::string computeDataLayout(const Triple &TT,
 } // namespace
 
 /// Create an Toy architecture model.
-ToyTargetMachine::ToyTargetMachine(
-    const Target &T, const Triple &TT, StringRef CPU,
-    StringRef FS, const TargetOptions &Options,
-    std::optional<Reloc::Model> RM,
-    std::optional<CodeModel::Model> CM,
-    CodeGenOpt::Level OL, bool JIT)
-    : LLVMTargetMachine(
-          T, computeDataLayout(TT, CPU, FS), TT, CPU,
-          FS, Options, !RM ? Reloc::Static : *RM,
-          getEffectiveCodeModel(CM, CodeModel::Medium),
-          OL),
-      TLOF(std::make_unique<
-           TargetLoweringObjectFileELF>()) {
+ToyTargetMachine::ToyTargetMachine(const Target &T, const Triple &TT,
+                                   StringRef CPU, StringRef FS,
+                                   const TargetOptions &Options,
+                                   std::optional<Reloc::Model> RM,
+                                   std::optional<CodeModel::Model> CM,
+                                   CodeGenOpt::Level OL, bool JIT)
+    : LLVMTargetMachine(T, computeDataLayout(TT, CPU, FS), TT, CPU, FS, Options,
+                        !RM ? Reloc::Static : *RM,
+                        getEffectiveCodeModel(CM, CodeModel::Medium), OL),
+      TLOF(std::make_unique<TargetLoweringObjectFileELF>()) {
   initAsmInfo();
 }
 
 ToyTargetMachine::~ToyTargetMachine() {}
 
 const ToySubtarget *
-ToyTargetMachine::getSubtargetImpl(
-    const Function &F) const {
+ToyTargetMachine::getSubtargetImpl(const Function &F) const {
   Attribute CPUAttr = F.getFnAttribute("target-cpu");
-  Attribute FSAttr =
-      F.getFnAttribute("target-features");
+  Attribute FSAttr = F.getFnAttribute("target-features");
 
-  std::string CPU =
-      !CPUAttr.hasAttribute(Attribute::None)
-          ? CPUAttr.getValueAsString().str()
-          : TargetCPU;
+  std::string CPU = !CPUAttr.hasAttribute(Attribute::None)
+                        ? CPUAttr.getValueAsString().str()
+                        : TargetCPU;
   std::string FS = !FSAttr.hasAttribute(Attribute::None)
                        ? FSAttr.getValueAsString().str()
                        : TargetFS;
@@ -104,8 +95,7 @@ ToyTargetMachine::getSubtargetImpl(
     // TM and the code generation flags on the function
     // that reside in TargetOptions.
     resetTargetOptions(F);
-    I = std::make_unique<ToySubtarget>(TargetTriple,
-                                        CPU, FS, *this);
+    I = std::make_unique<ToySubtarget>(TargetTriple, CPU, FS, *this);
   }
 
   return I.get();
@@ -115,8 +105,7 @@ namespace {
 /// Toy Code Generator Pass Configuration Options.
 class ToyPassConfig : public TargetPassConfig {
 public:
-  ToyPassConfig(ToyTargetMachine &TM,
-                 PassManagerBase &PM)
+  ToyPassConfig(ToyTargetMachine &TM, PassManagerBase &PM)
       : TargetPassConfig(TM, PM) {}
 
   bool addInstSelector() override;
@@ -124,16 +113,13 @@ public:
 };
 } // namespace
 
-TargetPassConfig *ToyTargetMachine::createPassConfig(
-    PassManagerBase &PM) {
+TargetPassConfig *ToyTargetMachine::createPassConfig(PassManagerBase &PM) {
   return new ToyPassConfig(*this, PM);
 }
 
 bool ToyPassConfig::addInstSelector() {
-  addPass(createToyISelDag(getTM<ToyTargetMachine>(),
-                            getOptLevel()));
+  addPass(createToyISelDag(getTM<ToyTargetMachine>(), getOptLevel()));
   return false;
 }
 
-void ToyPassConfig::addPreEmitPass() {
-}
+void ToyPassConfig::addPreEmitPass() {}
diff --git a/llvm/lib/Target/Toy/ToyTargetMachine.h b/llvm/lib/Target/Toy/ToyTargetMachine.h
index c9ddaa819489..ba49d15ca3b1 100644
--- a/llvm/lib/Target/Toy/ToyTargetMachine.h
+++ b/llvm/lib/Target/Toy/ToyTargetMachine.h
@@ -21,28 +21,22 @@ namespace llvm {
 
 class ToyTargetMachine : public LLVMTargetMachine {
   std::unique_ptr<TargetLoweringObjectFile> TLOF;
-  mutable StringMap<std::unique_ptr<ToySubtarget>>
-      SubtargetMap;
+  mutable StringMap<std::unique_ptr<ToySubtarget>> SubtargetMap;
 
 public:
-  ToyTargetMachine(const Target &T, const Triple &TT,
-                    StringRef CPU, StringRef FS,
-                    const TargetOptions &Options,
-                    std::optional<Reloc::Model> RM,
-                    std::optional<CodeModel::Model> CM,
-                    CodeGenOpt::Level OL, bool JIT);
+  ToyTargetMachine(const Target &T, const Triple &TT, StringRef CPU,
+                   StringRef FS, const TargetOptions &Options,
+                   std::optional<Reloc::Model> RM,
+                   std::optional<CodeModel::Model> CM, CodeGenOpt::Level OL,
+                   bool JIT);
   ~ToyTargetMachine() override;
 
-  TargetLoweringObjectFile *
-  getObjFileLowering() const override {
+  TargetLoweringObjectFile *getObjFileLowering() const override {
     return TLOF.get();
   }
-  const ToySubtarget *
-  getSubtargetImpl(const Function &) const override;
-
-  TargetPassConfig *
-  createPassConfig(PassManagerBase &PM) override;
+  const ToySubtarget *getSubtargetImpl(const Function &) const override;
 
+  TargetPassConfig *createPassConfig(PassManagerBase &PM) override;
 };
 
 } // end namespace llvm
